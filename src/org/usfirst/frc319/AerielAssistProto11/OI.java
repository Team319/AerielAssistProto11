// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc319.AerielAssistProto11;
import org.usfirst.frc319.AerielAssistProto11.commands.DefaultFlytrapSetpoint;
import org.usfirst.frc319.AerielAssistProto11.commands.armTrussPass;
import org.usfirst.frc319.AerielAssistProto11.commands.CatchLightOff;
import org.usfirst.frc319.AerielAssistProto11.commands.CatchLightOn;
import org.usfirst.frc319.AerielAssistProto11.commands.FlytrapCatchAndRelease;
import org.usfirst.frc319.AerielAssistProto11.commands.OpenTrapSetpoint;
import org.usfirst.frc319.AerielAssistProto11.commands.CloseTrapSetpoint;
import org.usfirst.frc319.AerielAssistProto11.commands.collectorWheelsStop;
import org.usfirst.frc319.AerielAssistProto11.commands.GyroReset;
import org.usfirst.frc319.AerielAssistProto11.commands.armHome;
import org.usfirst.frc319.AerielAssistProto11.commands.collectorWheelsBack;
import org.usfirst.frc319.AerielAssistProto11.commands.AutonomousCommand;
import org.usfirst.frc319.AerielAssistProto11.commands.collectorWheelsForward;
import org.usfirst.frc319.AerielAssistProto11.commands.armSpinForward;
import org.usfirst.frc319.AerielAssistProto11.commands.armSpinStop;
import org.usfirst.frc319.AerielAssistProto11.commands.joystickDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc319.AerielAssistProto11.commands.*;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    public Joystick joystick;
    public JoystickButton aButton;
    public JoystickButton bButton;
    public JoystickButton xButton;
    public JoystickButton yButton;
    
    public JoystickButton startButton;
    public JoystickButton selectButton;
    public JoystickButton rightBumper;
    public JoystickButton leftBumper;
    public JoystickButton leftStick;
    public JoystickButton rightStick;
    public XboxLeftTrigger leftTrigger;
    public XboxRightTrigger rightTrigger;
    
    public Joystick joystick2;
    //public JoystickButton leftBumper2;
    //public JoystickButton rightBumper2;
    public JoystickButton xButton2;
    public JoystickButton bButton2;
    
    public OI() {
        joystick = new Joystick(1);
        joystick2 = new Joystick(2);
        
        yButton = new JoystickButton(joystick, 4);
        yButton.whenPressed(new collectorWheelsBack());
        xButton = new JoystickButton(joystick, 3);
        xButton.whenPressed(new armHome());
        bButton = new JoystickButton(joystick, 2);
        bButton.whenPressed(new collectorWheelsStop());
        aButton = new JoystickButton(joystick, 1);
        aButton.whenPressed(new collectorWheelsForward());
         startButton = new JoystickButton(joystick, 8);
        startButton.whenPressed(new GyroReset());
        selectButton = new JoystickButton(joystick, 7);
        selectButton.whenPressed(new armSpinStop());
        rightBumper = new JoystickButton(joystick, 6);
        rightBumper.whenPressed(new LowShot());
       // leftBumper = new JoystickButton(joystick, 5);
        //leftBumper.whenPressed(new LowShot());
        
        
        
        
        //rightBumper.whenPressed(new CloseTrapSetpoint());
        
        //rightBumper.whenPressed(new CloseTrapFast());
        //QUICK "FIX"
        
        //leftBumper = new JoystickButton(joystick, 5);
        //leftBumper.whenPressed(new CatchLightOff());
        
        //leftTrigger = new XboxLeftTrigger(joystick);
        //leftTrigger.whileHeld(new DefaultFlytrapSetpoint());
        //leftTrigger.whenReleased(new OpenTrapSetpoint());

        //CHANGED SO have to push the trigger then shoot
        //leftBumper = new JoystickButton(joystick, 5);
        //leftBumper.whileHeld(new OpenTrapSetpoint());
        //leftBumper.whenReleased(new CloseTrapSetpoint());
        //leftBumper.whenPressed(new OpenTrapSetpoint());
        
        //leftBumper.whenPressed(new TwoStageOpenTrap());
        //QUICK "FIX"
        
        rightTrigger = new XboxRightTrigger(joystick);
        rightTrigger.whenPressed(new ShootCommand());
        
        //leftBumper2 = new JoystickButton(joystick2,5);
        //leftBumper2.whenPressed(new CatchLightOff());
        //rightBumper2 = new JoystickButton(joystick2, 6);
        //rightBumper2.whenPressed(new CatchLightOn());
        bButton2 = new JoystickButton(joystick2,2);
        bButton2.whenPressed(new CloseTrapSetpoint());
        xButton2 = new JoystickButton(joystick2,3);
        xButton2.whenPressed(new OpenTrapSetpoint());
        
       // leftStick = new JoystickButton(joystick, 9);
       // leftStick.whenPressed(new armSpinForward());
        //rightStick = new JoystickButton(joystick, 10);
        //rightStick.whenPressed(new armSpinStop());
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("joystickDrive", new joystickDrive());
        SmartDashboard.putData("armSpinForward", new armSpinForward());
        SmartDashboard.putData("collectorWheelsBack", new collectorWheelsBack());
        SmartDashboard.putData("armSpinStop", new armSpinStop());
        SmartDashboard.putData("collectorWheelsForward", new collectorWheelsForward());
        SmartDashboard.putData("collectorWheelsStop", new collectorWheelsStop());
        SmartDashboard.putData("armHome", new armHome());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick() {
        return joystick;
    }
    
   // public Joystick getJoystick2(){
   //     return joystick2;
   // }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
