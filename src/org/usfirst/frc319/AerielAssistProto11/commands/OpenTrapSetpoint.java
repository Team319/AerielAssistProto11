// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc319.AerielAssistProto11.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc319.AerielAssistProto11.Robot;

/**
 *
 */
public class  OpenTrapSetpoint extends Command {
   // private int flytrapCounter;
    public OpenTrapSetpoint() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.flytrap);
      //  flytrapCounter = 0;
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
       // System.out.println("OPEN: current position ="+ Robot.flytrap.getPosition());
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZE
        Robot.flytrap.enable();
        Robot.flytrap.setSetpoint(Robot.flytrap.openTrapSetpoint);
        Robot.flytrap.catchLightOn();
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZE
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        /**
        System.out.println("Reset Switch = " + Robot.flytrap.getFlytrapResetSwitch());
        if(Robot.flytrap.getPosition() <= (Robot.flytrap.getSetpoint())){
            if (!Robot.flytrap.getFlytrapResetSwitch()&& flytrapCounter < 3){
                Robot.flytrap.setSetpointRelative(-50);
                flytrapCounter++;
                System.out.println("Searching For Limit Switch");
                System.out.println("flytrapCounter=" + flytrapCounter);

            }
            while(!Robot.flytrap.onTarget()){

            }
            * */
        }
       
   

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ISFINISHED
       // return Robot.flytrap.onTarget();
        return false;
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ISFINISHED
       /**
        if ((Robot.flytrap.onTarget()&& Robot.flytrap.getFlytrapResetSwitch())|| flytrapCounter >= 3){
            return true;
            
    
            }
        else {
            return false;
        }**/
    }
    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
